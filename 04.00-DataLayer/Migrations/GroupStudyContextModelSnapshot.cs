// <auto-generated />
using System;
using DataLayer.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(GroupStudyContext))]
    partial class GroupStudyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataLayer.DBObject.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Schhool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 7,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trankhaiminhkhoi10a3@gmail.com",
                            FullName = "Trần Khải Minh Khôi",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student1"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student2@gmail.com",
                            FullName = "Đào Thị Bưởi",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student2"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student3@gmail.com",
                            FullName = "Trần Văn Chình",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student3"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student4@gmail.com",
                            FullName = "Lí Thị Diệu",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student4"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student5@gmail.com",
                            FullName = "Trần Văn Em",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Username = "student5"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student6@gmail.com",
                            FullName = "Lí Chính Phúc",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student6"
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student7@gmail.com",
                            FullName = "Ngô Văn Gia",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student7"
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student8@gmail.com",
                            FullName = "Trần Văn Hơn",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Username = "student8"
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student9@gmail.com",
                            FullName = "Trần Văn Yến",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student9"
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 6,
                            DateOfBirth = new DateTime(2009, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student10@gmail.com",
                            FullName = "Trần Văn Dền",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 2,
                            Schhool = "THCS Minh Đức",
                            Username = "student10"
                        },
                        new
                        {
                            Id = 11,
                            DateOfBirth = new DateTime(1975, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trankhaiminhkhoi@gmail.com",
                            FullName = "Trần Ba",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 1,
                            Username = "parent1"
                        },
                        new
                        {
                            Id = 12,
                            DateOfBirth = new DateTime(1975, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "parent2@gmail.com",
                            FullName = "Trần Văn Mạ",
                            Password = "15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225",
                            Phone = "0123456789",
                            RoleId = 1,
                            Username = "parent2"
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeetingId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Classes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Name = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = 11
                        },
                        new
                        {
                            Id = 12,
                            Name = 12
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.Connection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingParticipations", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.DocumentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("HttpLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId");

                    b.ToTable("DocumentFiles", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 7,
                            Name = "Nhóm 1 của học sinh 1"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 7,
                            Name = "Nhóm 2 của học sinh 1"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 8,
                            Name = "Nhóm 3 của học sinh 2"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 8,
                            Name = "Nhóm 4 của học sinh 2"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 8,
                            Name = "Nhóm 5 của học sinh 3"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 8,
                            Name = "Nhóm 6 của học sinh 3"
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MemberRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("AccountId", "GroupId")
                        .IsUnique();

                    b.ToTable("GroupMembers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            GroupId = 1,
                            IsActive = true,
                            MemberRole = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            GroupId = 1,
                            IsActive = true,
                            MemberRole = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 5,
                            GroupId = 1,
                            IsActive = false,
                            MemberRole = 2
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 1,
                            GroupId = 2,
                            IsActive = true,
                            MemberRole = 1
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 2,
                            GroupId = 2,
                            IsActive = true,
                            MemberRole = 2
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 2,
                            GroupId = 3,
                            IsActive = true,
                            MemberRole = 1
                        },
                        new
                        {
                            Id = 7,
                            AccountId = 1,
                            GroupId = 3,
                            IsActive = true,
                            MemberRole = 2
                        },
                        new
                        {
                            Id = 8,
                            AccountId = 2,
                            GroupId = 4,
                            IsActive = true,
                            MemberRole = 1
                        },
                        new
                        {
                            Id = 9,
                            AccountId = 3,
                            GroupId = 5,
                            IsActive = true,
                            MemberRole = 1
                        },
                        new
                        {
                            Id = 10,
                            AccountId = 3,
                            GroupId = 6,
                            IsActive = true,
                            MemberRole = 1
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.GroupSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.ToTable("GroupSubjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            GroupId = 1,
                            SubjectId = 4
                        },
                        new
                        {
                            Id = 3,
                            GroupId = 1,
                            SubjectId = 8
                        },
                        new
                        {
                            Id = 4,
                            GroupId = 2,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            GroupId = 2,
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 6,
                            GroupId = 2,
                            SubjectId = 3
                        },
                        new
                        {
                            Id = 7,
                            GroupId = 3,
                            SubjectId = 5
                        },
                        new
                        {
                            Id = 8,
                            GroupId = 3,
                            SubjectId = 6
                        },
                        new
                        {
                            Id = 9,
                            GroupId = 4,
                            SubjectId = 5
                        },
                        new
                        {
                            Id = 10,
                            GroupId = 5,
                            SubjectId = 5
                        },
                        new
                        {
                            Id = 11,
                            GroupId = 6,
                            SubjectId = 5
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId");

                    b.ToTable("JoinInvites", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 2,
                            GroupId = 1,
                            State = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 3,
                            GroupId = 1,
                            State = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 2,
                            GroupId = 2,
                            State = 1
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 3,
                            GroupId = 2,
                            State = 2
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 1,
                            GroupId = 3,
                            State = 1
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 3,
                            GroupId = 3,
                            State = 2
                        },
                        new
                        {
                            Id = 7,
                            AccountId = 3,
                            GroupId = 4,
                            State = 2
                        },
                        new
                        {
                            Id = 8,
                            AccountId = 3,
                            GroupId = 5,
                            State = 2
                        },
                        new
                        {
                            Id = 9,
                            AccountId = 2,
                            GroupId = 6,
                            State = 2
                        },
                        new
                        {
                            Id = 10,
                            AccountId = 1,
                            GroupId = 6,
                            State = 2
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountMember")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ScheduleEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduleStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId");

                    b.ToTable("JoinRequests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 4,
                            GroupId = 1,
                            State = 2
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 3,
                            GroupId = 2,
                            State = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 4,
                            GroupId = 3,
                            State = 2
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            GroupId = 4,
                            State = 2
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 3,
                            GroupId = 5,
                            State = 2
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 1,
                            GroupId = 6,
                            State = 2
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("RevieweeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("RevieweeId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.ReviewDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("ReviewDetails", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toán"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lí"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hóa"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Văn"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sử"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Địa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sinh"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Anh"
                        });
                });

            modelBuilder.Entity("DataLayer.DBObject.Supervision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Supervisions", (string)null);
                });

            modelBuilder.Entity("DataLayer.DBObject.Account", b =>
                {
                    b.HasOne("DataLayer.DBObject.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("DataLayer.DBObject.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.DBObject.Chat", b =>
                {
                    b.HasOne("DataLayer.DBObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Meeting", "Meeting")
                        .WithMany("Chats")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("DataLayer.DBObject.Connection", b =>
                {
                    b.HasOne("DataLayer.DBObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Meeting", "Meeting")
                        .WithMany("Connections")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("DataLayer.DBObject.DocumentFile", b =>
                {
                    b.HasOne("DataLayer.DBObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataLayer.DBObject.Group", b =>
                {
                    b.HasOne("DataLayer.DBObject.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DataLayer.DBObject.GroupMember", b =>
                {
                    b.HasOne("DataLayer.DBObject.Account", "Account")
                        .WithMany("GroupMembers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataLayer.DBObject.GroupSubject", b =>
                {
                    b.HasOne("DataLayer.DBObject.Group", "Group")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataLayer.DBObject.Invite", b =>
                {
                    b.HasOne("DataLayer.DBObject.Account", "Account")
                        .WithMany("JoinInvites")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Group", "Group")
                        .WithMany("JoinInvites")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataLayer.DBObject.Meeting", b =>
                {
                    b.HasOne("DataLayer.DBObject.Group", "Group")
                        .WithMany("Meetings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Schedule", "Schedule")
                        .WithMany("Meetings")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Group");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DataLayer.DBObject.Request", b =>
                {
                    b.HasOne("DataLayer.DBObject.Account", "Account")
                        .WithMany("JoinRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Group", "Group")
                        .WithMany("JoinRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataLayer.DBObject.Review", b =>
                {
                    b.HasOne("DataLayer.DBObject.Meeting", "Meeting")
                        .WithMany("Reviews")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Account", "Reviewee")
                        .WithMany()
                        .HasForeignKey("RevieweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("Reviewee");
                });

            modelBuilder.Entity("DataLayer.DBObject.ReviewDetail", b =>
                {
                    b.HasOne("DataLayer.DBObject.Review", "Review")
                        .WithMany("Details")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Account", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Review");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("DataLayer.DBObject.Schedule", b =>
                {
                    b.HasOne("DataLayer.DBObject.Group", "Group")
                        .WithMany("Schedules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataLayer.DBObject.Supervision", b =>
                {
                    b.HasOne("DataLayer.DBObject.Account", "Parent")
                        .WithMany("SupervisionsForParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.DBObject.Account", "Student")
                        .WithMany("SupervisionsForStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataLayer.DBObject.Account", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("JoinInvites");

                    b.Navigation("JoinRequests");

                    b.Navigation("SupervisionsForParent");

                    b.Navigation("SupervisionsForStudent");
                });

            modelBuilder.Entity("DataLayer.DBObject.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("GroupSubjects");

                    b.Navigation("JoinInvites");

                    b.Navigation("JoinRequests");

                    b.Navigation("Meetings");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataLayer.DBObject.Meeting", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Connections");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DataLayer.DBObject.Review", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("DataLayer.DBObject.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DataLayer.DBObject.Schedule", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
